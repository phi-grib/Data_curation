"""
    Copied from parameters.py from Flame

    Created by: Eric March Vila (eric.march@upf.edu)
    On: 27/04/2021, 11:16 AM
"""

import os
import yaml
import json

from typing import Union, Tuple

from curate.util import utils

class Parameters:
    """ 
        Class managing the parameteres used for each curation
    """

    def __init__(self):
        return   

    def loadYaml_curation(self, curation_path: str) -> Tuple[bool, str]:       
        """ 
            load a set of parameters from the configuration file present 
            at the model directory

            adds some parameters identifying the model and the 
            hash of the configuration file

            :param curation_path:
        """

        # obtain the path and the default name of the model parameters
        parameters_file_path = utils.curation_tree_path(curation_path)
        
        if not os.path.isdir(parameters_file_path):
            return False, 'Curation "{}" not found'.format(curation_path)

        parameters_file_name = os.path.join(parameters_file_path, 'curation_parameters.yaml')

        # load the main class dictionary (p) from this yaml file
        if not os.path.isfile(parameters_file_name):
            return False, 'Parameters file not found'

        try:
            with open(parameters_file_name, 'r') as pfile:
                self.p = yaml.safe_load(pfile)
        except Exception as e:
            return False, e

        # add keys for the model
        self.p['endpoint'] = curation_path
        self.p['curation_path'] = parameters_file_path

        return True, 'OK'

    def applyDelta_curation(self, newp: dict):
        """
            Update internal dict with keys in the input file (delta)

            :param newp: new parameters to update
        """

        black_list = ['curation_path','endpoint']
        for key in newp:
            if key not in black_list:

                val = newp[key]

                # YAML define null values as None, which are interpreted 
                # as strings
                if val == 'None':
                    val = None

                self.p[key] = val

    def delta_curation(self, curation: str, parameters: str, iformat: str ='YAML') -> Tuple[str, bool]:
        """
            load a set of parameters from the configuration file present 
            at the curation directory

            also, inserts the keys present in the param_file provided, 
            assuming that it contains a YAML-compatible format, like the one
            generated by manage

            adds some parameters identifying the curation

            :param curation:
            :param parameters:
        """

        if not self.loadYaml_curation(curation):
            return False, 'file not found'
        
        # parse parameter file assuning it will be in
        # a YAML-compatible format
        if iformat == 'JSONS':
            try:
                newp = json.loads(parameters)
            except Exception as e:
                return False, e
        else:
            try:
                with open(parameters, 'r') as pfile:
                    if iformat == 'YAML':
                        newp = yaml.safe_load(pfile)
                    elif iformat == 'JSON':
                        newp = json.load(pfile)
            except Exception as e:
                return False, e
        
        self.applyDelta_curation(newp)

        # dump internal dict to the parameters file
        parameters_file_path = utils.curation_tree_path(curation)
        parameters_file_name = os.path.join(parameters_file_path, 'curation_parameters.yaml')

        try:
            with open(parameters_file_name, 'w') as pfile:
                yaml.dump (self.p, pfile)
        except Exception as e:
            return False, 'unable to write parameters'

        return True, 'OK'
    
    @staticmethod
    def saveJSON(self, model, version, input_JSON):
        p = json.load(input_JSON)
        parameters_file_path = utils.model_path(model, version)
        parameters_file_name = os.path.join (parameters_file_path,
                                            'curation_parameters.yaml')
        try:
            with open(parameters_file_name, 'w') as pfile:
                yaml.dump (p, pfile)
        except Exception as e:
            return False

        return True

    def update_file_curation(self, curation: str) -> Union[Tuple[bool,str], bool]:
        """
            Function to save current parameter values modified
            at the object level (i.e: From a interactive python shell)

            :param curation:
        """

        p = self.p
        if not p:
            return False, 'No loaded parameters'

        parameters_file_path = utils.curation_tree_path(curation)
        parameters_file_name = os.path.join(parameters_file_path,
                                            'curation_parameters.yaml')

        try:
            with open(parameters_file_name, 'w') as pfile:
                yaml.dump (p, pfile)
        except Exception as e:
            return False, e
        return True

    def dumpJSON (self):
        return json.dumps(self.p)
    
    def dumpYAML_curation(self) -> list:
        """
            Returns a list from the self.p object containing the parameters

            :return yaml_out
        """

        yaml_out = []

        order = ['data_input','molecule_identifier','structure_column','endpoint',
                 'metadata','separator','remove_problematic','outfile_type','curation_path']

        for ik in order:
            if ik in self.p:
                k = ik
                v = self.p[k]

                yaml_out.append ("{} : {}".format(k,str(v)))

        return yaml_out